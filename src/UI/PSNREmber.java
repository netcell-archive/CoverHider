/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import PaletteImage.PaletteImage;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.Window;
import java.awt.datatransfer.StringSelection;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author tebaomang
 */
public class PSNREmber extends javax.swing.JFrame {
    
    private boolean image1Choosen=false;
    private String imageName, imagePath;
    
    private void Copy(String string){
        StringSelection data;
        data = new StringSelection(string);
        getToolkit().getSystemClipboard().setContents(data, data);
    }
    
    public PSNREmber() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FirstPictureButton = new javax.swing.JButton();
        EmbeFileButton = new javax.swing.JButton();
        Method1Chooser = new javax.swing.JComboBox();
        FirstPictureLabel = new javax.swing.JLabel();
        PSNR1Label = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        PSNRVALUE = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        PSNR2Label = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Method2Chooser = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        ItterationSlider = new javax.swing.JSlider();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        Tools = new javax.swing.JMenu();
        MainUI = new javax.swing.JMenuItem();
        Extract = new javax.swing.JMenuItem();
        PSNREmbe = new javax.swing.JMenuItem();
        PSNRMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Embe by PSNR");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        FirstPictureButton.setText("Choose picture");
        FirstPictureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FirstPictureButtonActionPerformed(evt);
            }
        });

        EmbeFileButton.setText("Embe File");
        EmbeFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmbeFileButtonActionPerformed(evt);
            }
        });

        Method1Chooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hamming (1,3,7)", "CPT (2,3,7)", "Golay (3,23,11)", "COV (2,9,5)", "CPT (2,9,3)", "CPTE (2,9,4)", "MOD (3,18,9)", "MOD (3,15,8)" }));
        Method1Chooser.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Method1ChooserItemStateChanged(evt);
            }
        });
        Method1Chooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                Method1ChooserPropertyChange(evt);
            }
        });

        FirstPictureLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        FirstPictureLabel.setText("Gimme a picture");

        PSNR1Label.setText("0.00 bytes");
        PSNR1Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PSNR1LabelMouseClicked(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("PSNR:");

        PSNRVALUE.setText("50");

        jLabel3.setText("Method 1:");

        PSNR2Label.setText("0.00 bytes");
        PSNR2Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PSNR2LabelMouseClicked(evt);
            }
        });

        jLabel4.setText("Method 2:");

        Method2Chooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hamming (1,3,7)", "CPT (2,3,7)", "Golay (3,23,11)", "COV (2,9,5)", "CPT (2,9,3)", "CPTE (2,9,4)", "MOD (3,18,9)", "MOD (3,15,8)" }));
        Method2Chooser.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Method2ChooserItemStateChanged(evt);
            }
        });
        Method2Chooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                Method2ChooserPropertyChange(evt);
            }
        });

        jLabel5.setText("Method 1:");

        jLabel6.setText("Method 2:");

        jLabel1.setText("Itteration");

        ItterationSlider.setMinimum(1);
        ItterationSlider.setValue(1);
        ItterationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ItterationSliderStateChanged(evt);
            }
        });

        jLabel7.setText("1");

        jButton1.setText("Increase");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Decrease");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Tools.setText("Tools");

        MainUI.setText("Embe Information");
        MainUI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainUIActionPerformed(evt);
            }
        });
        Tools.add(MainUI);

        Extract.setText("Extract Information");
        Extract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExtractActionPerformed(evt);
            }
        });
        Tools.add(Extract);

        PSNREmbe.setText("Embe by PSNR");
        PSNREmbe.setEnabled(false);
        PSNREmbe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PSNREmbeActionPerformed(evt);
            }
        });
        Tools.add(PSNREmbe);

        PSNRMenu.setText("Calculate PSNR");
        PSNRMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PSNRMenuActionPerformed(evt);
            }
        });
        Tools.add(PSNRMenu);

        jMenuBar1.add(Tools);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(22, 22, 22)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(FirstPictureButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 127, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(FirstPictureLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 154, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(jLabel5)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(Method1Chooser, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(jLabel6)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(Method2Chooser, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                            .add(layout.createSequentialGroup()
                                                .add(jLabel4)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(PSNR2Label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                            .add(layout.createSequentialGroup()
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                                    .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                    .add(layout.createSequentialGroup()
                                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                        .add(PSNR1Label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                                    .add(layout.createSequentialGroup()
                                                        .add(12, 12, 12)
                                                        .add(PSNRVALUE)))))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(EmbeFileButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                            .add(layout.createSequentialGroup()
                                                .add(jButton2)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(jButton1))
                                            .add(layout.createSequentialGroup()
                                                .add(jLabel1)
                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                                .add(ItterationSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 184, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jLabel7)))
                                .add(0, 0, Short.MAX_VALUE)))))
                .add(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(16, 16, 16)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(FirstPictureButton)
                    .add(FirstPictureLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(Method1Chooser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(Method2Chooser))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(PSNRVALUE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(8, 8, 8)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel3)
                            .add(PSNR1Label))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel4)
                            .add(PSNR2Label)))
                    .add(EmbeFileButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ItterationSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1)
                    .add(jLabel7))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(jButton2))
                .add(9, 9, 9))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FirstPictureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FirstPictureButtonActionPerformed
        
        /* Refer to Embeder Original Image Button */
        
        FileDialog ChooseImage = new FileDialog(new Frame(), "Choose First Picture", FileDialog.LOAD);
        ChooseImage.setFilenameFilter(new FilenameFilter(){
            @Override
            public boolean accept(File dir, String name){
                return (name.endsWith(".bmp") || name.endsWith(".gif"));
            }
            
        });
        ChooseImage.setVisible(true);
        imageName = ChooseImage.getFile();
        imagePath = ChooseImage.getDirectory();
        try {
            BufferedImage imageFile = ImageIO.read(new File(imagePath+System.getProperty("file.separator")+imageName));
            FirstPictureLabel.setText(imageFile.getWidth()+"x"+imageFile.getHeight()+" pixels");
        } catch (IOException ex) {
            Logger.getLogger(PSNREmber.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (!imageName.isEmpty())
                image1Choosen = true;
        }
            
    }//GEN-LAST:event_FirstPictureButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        List<Window> visibleWindows = new ArrayList<Window>();
            for(Window w: Window.getWindows()){
                if(w.isShowing()){
                    visibleWindows.add(w);
                }
            }
        if(visibleWindows.isEmpty()) System.exit(0);
    }//GEN-LAST:event_formWindowClosed
 
    public boolean isNumber(String in) {
        
        try {

            Double.parseDouble(in);
        
        } catch (NumberFormatException ex) {
            return false;
        }
        
        return true;
    }
    
    private void EmbeFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmbeFileButtonActionPerformed
        try {
            // TODO add your handling code here:
            
            if(image1Choosen){
                if(PSNRVALUE.getText()!=null){
                    if(isNumber(PSNRVALUE.getText())){
                        
                        double Method1Size = 0, Method2Size = 0;
                        boolean breaker = false;
                        
                        for(int q=0;q<ItterationSlider.getValue()&&!breaker;q++){
                            
                            /* Create 2 copy for processing and save a copy of the image */
                            PaletteImage image = new PaletteImage(imagePath,imageName);
                            PaletteImage image1 = new PaletteImage(imagePath,imageName);
                            PaletteImage image2 = new PaletteImage(imagePath,imageName);
                            
                            /* Read the inputted PSNR value */
                            double PSNRVal = Double.parseDouble(PSNRVALUE.getText());
                            
                            /* Get method properties */
                            int[] methodProp = Embeder.methodProp(Method1Chooser.getSelectedIndex());
                            int blockSize1 = methodProp[0];
                            int infoBlockSize1 = methodProp[1];
                            int plainBlockSize1 = methodProp[2];
                            int method1 = methodProp[3];
                            
                            methodProp = Embeder.methodProp(Method2Chooser.getSelectedIndex());
                            int blockSize2 = methodProp[0];
                            int infoBlockSize2 = methodProp[1];
                            int plainBlockSize2 = methodProp[2];
                            int method2 = methodProp[3];
                            
                            /* Generate information */
                            int infoSize1 = image1.ammountOfBlocks(plainBlockSize1)*infoBlockSize1;
                            int infoSize2 = image1.ammountOfBlocks(plainBlockSize2)*infoBlockSize2;
                            byte[] info = new byte[infoSize1>infoSize2?infoSize1:infoSize2];
                            Random ran = new Random();
                            for(int i=0;i<info.length;i++) info[i] = (byte) ran.nextInt(2);
                            
                            int method1Size = image1.PSNREmbed(info, blockSize1, method1, PSNRVal);
                            int method2Size = image2.PSNREmbed(info, blockSize2, method2, PSNRVal);
                            
                            if(method1Size!=-1){
                                if(method2Size!=-1){
                                    
                                    Method1Size += method1Size;
                                    Method2Size += method2Size;
                                    
                                    DecimalFormat dFormat = new DecimalFormat("0.00");
                                    PSNR1Label.setText(dFormat.format((double)Method1Size/(q+1))+" bytes");
                                    PSNR2Label.setText(dFormat.format((double)Method2Size/(q+1))+" bytes");
                                    
                                } else {
                                    JOptionPane.showMessageDialog(new JFrame(), "PSNR too small", "ERROR", JOptionPane.ERROR_MESSAGE);
                                    breaker = true;
                                }
                            } else {
                                JOptionPane.showMessageDialog(new JFrame(), "PSNR too small", "ERROR", JOptionPane.ERROR_MESSAGE);
                                breaker = true;
                            }
                        }
                    }  else JOptionPane.showMessageDialog(new JFrame(), "PSNR Value inputted is not a number", "ERROR", JOptionPane.ERROR_MESSAGE);
                }  else JOptionPane.showMessageDialog(new JFrame(), "PSNR Value not inputted", "ERROR", JOptionPane.ERROR_MESSAGE);
            } else JOptionPane.showMessageDialog(new JFrame(), "Original image not selected", "ERROR", JOptionPane.ERROR_MESSAGE);
            
        } catch (Exception ex) {
            Logger.getLogger(PSNREmber.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_EmbeFileButtonActionPerformed
    
    private void Method1ChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_Method1ChooserPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_Method1ChooserPropertyChange

    private void Method1ChooserItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Method1ChooserItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_Method1ChooserItemStateChanged

    private void Method2ChooserItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Method2ChooserItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_Method2ChooserItemStateChanged

    private void Method2ChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_Method2ChooserPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_Method2ChooserPropertyChange

    private void MainUIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainUIActionPerformed
        // TODO add your handling code here:
        Launcher.embe();
    }//GEN-LAST:event_MainUIActionPerformed

    private void ExtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExtractActionPerformed
        // TODO add your handling code here:
        Launcher.extract();
    }//GEN-LAST:event_ExtractActionPerformed

    private void PSNREmbeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PSNREmbeActionPerformed
        // TODO add your handling code here:
        Launcher.psnrembe();
    }//GEN-LAST:event_PSNREmbeActionPerformed

    private void PSNRMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PSNRMenuActionPerformed
        // TODO add your handling code here:
        Launcher.psnr();
    }//GEN-LAST:event_PSNRMenuActionPerformed

    private void ItterationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ItterationSliderStateChanged
        // TODO add your handling code here:
        jLabel7.setText(""+ItterationSlider.getValue());
    }//GEN-LAST:event_ItterationSliderStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        double result = Double.parseDouble(PSNRVALUE.getText())+1;
        PSNRVALUE.setText(""+result);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        double result = Double.parseDouble(PSNRVALUE.getText())-1;
        PSNRVALUE.setText(""+result);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void PSNR1LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PSNR1LabelMouseClicked
        // TODO add your handling code here:
        Copy(PSNR1Label.getText().substring(0, PSNR1Label.getText().length()-6));
    }//GEN-LAST:event_PSNR1LabelMouseClicked

    private void PSNR2LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PSNR2LabelMouseClicked
        // TODO add your handling code here:
        Copy(PSNR2Label.getText().substring(0, PSNR2Label.getText().length()-6));
    }//GEN-LAST:event_PSNR2LabelMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PSNREmber.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PSNREmber.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PSNREmber.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PSNREmber.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new PSNREmber().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton EmbeFileButton;
    private javax.swing.JMenuItem Extract;
    private javax.swing.JButton FirstPictureButton;
    private javax.swing.JLabel FirstPictureLabel;
    private javax.swing.JSlider ItterationSlider;
    private javax.swing.JMenuItem MainUI;
    private javax.swing.JComboBox Method1Chooser;
    private javax.swing.JComboBox Method2Chooser;
    private javax.swing.JLabel PSNR1Label;
    private javax.swing.JLabel PSNR2Label;
    private javax.swing.JMenuItem PSNREmbe;
    private javax.swing.JMenuItem PSNRMenu;
    private javax.swing.JTextField PSNRVALUE;
    private javax.swing.JMenu Tools;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
}
