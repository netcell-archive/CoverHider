/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Codes.Codes;
import PaletteImage.PaletteImage;
import java.awt.Desktop;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.Window;
import java.awt.datatransfer.StringSelection;
import java.awt.image.BufferedImage;
import java.io.*;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author tebaomang
 */
public class Embeder extends javax.swing.JFrame {
    
    private PaletteImage image;
    private boolean imageChoosen=false;
    private boolean infoChoosen=false;
    private boolean infoGenerated=false;
    private String imageName, imagePath;
    private String infoName, infoPath;
    private byte[] info;
    private PaletteImage infoImage;
    private String willBeCalc = " Will be automatically calculated!";

    /**
     * Creates new form NewJFrame
     */
    public Embeder() {
        initComponents();
        SaveButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ChooseOriginalButton = new javax.swing.JButton();
        ChooseSecretFileButton = new javax.swing.JButton();
        EmbedFileButton = new javax.swing.JButton();
        MethodChooser = new javax.swing.JComboBox();
        OriginalLabel = new javax.swing.JLabel();
        SecretLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        PSNRLabel = new javax.swing.JLabel();
        SaveButton = new javax.swing.JButton();
        SecretGenerateButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        Tools = new javax.swing.JMenu();
        MainUI = new javax.swing.JMenuItem();
        Extract = new javax.swing.JMenuItem();
        PSNREmbe = new javax.swing.JMenuItem();
        PSNRMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Embe Information");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        ChooseOriginalButton.setText("Choose picture");
        ChooseOriginalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseOriginalButtonActionPerformed(evt);
            }
        });

        ChooseSecretFileButton.setText("Choose secret file");
        ChooseSecretFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseSecretFileButtonActionPerformed(evt);
            }
        });

        EmbedFileButton.setText("Embe File");
        EmbedFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmbedFileButtonActionPerformed(evt);
            }
        });

        MethodChooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hamming (1,3,7)", "CPT (2,18,4)", "Golay (3,23,11)", "COV (2,9,5)", "CPT (2,9,3)", "CPTE (2,9,4)", "MOD (3,18,9)", "MOD (3,15,8)", "CPT (2,3,7)", "CPT(2,15,4)" }));
        MethodChooser.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MethodChooserItemStateChanged(evt);
            }
        });
        MethodChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MethodChooserActionPerformed(evt);
            }
        });
        MethodChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                MethodChooserPropertyChange(evt);
            }
        });

        OriginalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        OriginalLabel.setText("Gimme a picture");

        SecretLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SecretLabel.setText("Tell me some secret");
        SecretLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SecretLabelMouseClicked(evt);
            }
        });

        jLabel1.setText("PSNR:");

        PSNRLabel.setText("Will be calculated");
        PSNRLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PSNRLabelMouseClicked(evt);
            }
        });

        SaveButton.setText("Save File");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        SecretGenerateButton.setText("Maximum Secret");
        SecretGenerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SecretGenerateButtonActionPerformed(evt);
            }
        });

        Tools.setText("Tools");

        MainUI.setText("Embe Information");
        MainUI.setEnabled(false);
        MainUI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainUIActionPerformed(evt);
            }
        });
        Tools.add(MainUI);

        Extract.setText("Extract Information");
        Extract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExtractActionPerformed(evt);
            }
        });
        Tools.add(Extract);

        PSNREmbe.setText("Embe by PSNR");
        PSNREmbe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PSNREmbeActionPerformed(evt);
            }
        });
        Tools.add(PSNREmbe);

        PSNRMenu.setText("Calculate PSNR");
        PSNRMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PSNRMenuActionPerformed(evt);
            }
        });
        Tools.add(PSNRMenu);

        jMenuBar1.add(Tools);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(22, 22, 22)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(PSNRLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, EmbedFileButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, MethodChooser, 0, 163, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, ChooseSecretFileButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, SecretGenerateButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, SecretLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, ChooseOriginalButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, OriginalLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(SaveButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(17, 17, 17)
                .add(OriginalLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ChooseOriginalButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(SecretLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(SecretGenerateButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ChooseSecretFileButton)
                .add(30, 30, 30)
                .add(MethodChooser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(EmbedFileButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(PSNRLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(SaveButton)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ChooseOriginalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseOriginalButtonActionPerformed
        
        /* Show dialog to choose an image */
        FileDialog ChooseImage = new FileDialog(new Frame(), "Choose Original Picture", FileDialog.LOAD);
        ChooseImage.setFilenameFilter(new FilenameFilter(){
            @Override
            public boolean accept(File dir, String name){
                return (name.endsWith(".bmp") || name.endsWith(".gif"));
            }
        });
        ChooseImage.setVisible(true);
        imageName = ChooseImage.getFile();
        imagePath = ChooseImage.getDirectory();
        
        try {
            /* Display the dimensions */
            BufferedImage imageFile = ImageIO.read(new File(imagePath+System.getProperty("file.separator")+imageName));
            OriginalLabel.setText(imageFile.getWidth()+"x"+imageFile.getHeight()+" pixels");
        } catch (IOException ex) { } finally {
            /* Indicate loaded */
            if (!imageName.isEmpty())
                imageChoosen = true;
        }
            
    }//GEN-LAST:event_ChooseOriginalButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        
        List<Window> visibleWindows = new ArrayList<Window>();
            for(Window w: Window.getWindows()){
                if(w.isShowing()){
                    visibleWindows.add(w);
                }
            }
        if(visibleWindows.isEmpty()) System.exit(0);
    }//GEN-LAST:event_formWindowClosed
    
    private void ChooseSecretFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseSecretFileButtonActionPerformed
        
        /* Show the dialog to choose a file */
        FileDialog ChooseImage = new FileDialog(new Frame(), "Choose Secret File", FileDialog.LOAD);
        ChooseImage.setVisible(true);
        infoName = ChooseImage.getFile();
        infoPath = ChooseImage.getDirectory();
        
        if(!infoName.isEmpty()) {
            /*  */
            File file = new File(infoPath+System.getProperty("file.separator")+infoName);
            int[] methodProp = methodProp(MethodChooser.getSelectedIndex());
            int size = Codes.extendByteSize((int) file.length()+4,methodProp[1],methodProp[2]);
            SecretLabel.setText(size+" bytes");
            infoChoosen = true;
            infoGenerated=false;
        } 
        
    }//GEN-LAST:event_ChooseSecretFileButtonActionPerformed
    
    private void infoExtracter(){
        
        /* File reader to byte array */
        File file = new File(infoPath+System.getProperty("file.separator")+infoName);
        byte[] result = new byte[(int)file.length()];
        try {
            InputStream input = null;
            try {
                int totalBytesRead = 0;
                input = new BufferedInputStream(new FileInputStream(file));
                while(totalBytesRead < result.length){
                    int bytesRemaining = result.length - totalBytesRead;
                    int bytesRead = input.read(result, totalBytesRead, bytesRemaining); 
                    if (bytesRead > 0){
                        totalBytesRead = totalBytesRead + bytesRead;
                    }
                }
            } finally { input.close(); }
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) { }
        
        info = new byte[4*8+8*result.length];
        int offset = 0;
        
        /* Save file size by 4 bytes */
        byte[] length = Codes.int2Bin(result.length, 4*8);
        System.arraycopy(length, 0, info, offset, 4*8); offset += 4*8;
        
        for(int i=0; i<result.length;i++){
            byte[] b = Codes.int2Bin(result[i] & 0x0ff, 8);
            System.arraycopy(b, 0, info, offset, 8); offset += 8;
        }
    }
    
    public static int[] methodProp(int method){
        int[] result = {0,0,0,0};
        switch (method) {
            case 0:
                result[0] = 3;
                result[1] = 3;
                result[2] = 7;
                result[3] = PaletteImage.HAMMINGCODE;
                break;
            case 1:
                result[0] = 18;
                result[1] = 4;
                result[2] = 18;
                result[3] = PaletteImage.CPTMETHOD;
                break;
            case 2:
                result[0] = PaletteImage.NONE;
                result[1] = 11;
                result[2] = 23;
                result[3] = PaletteImage.GOLAYCODE;
                break;
            case 3:
                result[0] = PaletteImage.NONE;
                result[1] = 5;
                result[2] = 9;
                result[3] = PaletteImage.COV295CODE;
                break;
            case 4:
                result[0] = 9;
                result[1] = 3;
                result[2] = 9;
                result[3] = PaletteImage.CPTMETHOD;
                break;
            case 5:
                result[0] = 9;
                result[1] = 4;
                result[2] = 9;
                result[3] = PaletteImage.CPTEMETHOD;
                break;
            case 6:
                result[0] = PaletteImage.NONE;
                result[1] = 9;
                result[2] = 18;
                result[3] = PaletteImage.MOD3189;
                break;
            case 7:
                result[0] = PaletteImage.NONE;
                result[1] = 8;
                result[2] = 15;
                result[3] = PaletteImage.MOD3158;
                break;
            case 8:
                result[0] = 7;
                result[1] = 3;
                result[2] = 7;
                result[3] = PaletteImage.CPTMETHOD;
                break;
            case 9:
                result[0] = 15;
                result[1] = 4;
                result[2] = 15;
                result[3] = PaletteImage.CPTMETHOD;
        }
        return result;
    }
    
    private void EmbedFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmbedFileButtonActionPerformed
        try {
            
            if(imageChoosen){
                if(infoChoosen||infoGenerated){
                    
                    /* Load Image */
                    image = new PaletteImage(imagePath,imageName);
                    
                    /* Load information */
                    if(infoChoosen) infoExtracter();
                    
                    /* Get method properties */
                    int[] methodProp = methodProp(MethodChooser.getSelectedIndex());
                    int blockSize= methodProp[0];
                    int infoBlockSize = methodProp[1];
                    int plainBlockSize = methodProp[2];
                    int method = methodProp[3];
                    
                    if(image.ammountOfBlocks(plainBlockSize)>=info.length/infoBlockSize){
                        
                        /* Embed informations */
                        image.Embed(info,blockSize,method);
                        
                        /* Calculate and display PSNR */
                        DecimalFormat dFormat = new DecimalFormat("0.00");
                        PSNRLabel.setText(dFormat.format(new PaletteImage(image.getFilePath(),image.getFileName()).PSNR(image)));
                        
                        /* Allow to save*/
                        SaveButton.setEnabled(true);
                        
                    }  else JOptionPane.showMessageDialog(new JFrame(), "Secret is to big", "ERROR", JOptionPane.ERROR_MESSAGE);
                    
                }  else JOptionPane.showMessageDialog(new JFrame(), "Secret information not selected or generated", "ERROR", JOptionPane.ERROR_MESSAGE);
            } else JOptionPane.showMessageDialog(new JFrame(), "Original image not selected", "ERROR", JOptionPane.ERROR_MESSAGE);
            
        } catch (Exception ex) {
            Logger.getLogger(Embeder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_EmbedFileButtonActionPerformed
    
    private void MethodChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_MethodChooserPropertyChange
        
    }//GEN-LAST:event_MethodChooserPropertyChange

    private void MethodChooserItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MethodChooserItemStateChanged
        
        if(infoChoosen){
            File file = new File(infoPath+System.getProperty("file.separator")+infoName);
            int[] methodProp = methodProp(MethodChooser.getSelectedIndex());
            int size = Codes.extendByteSize((int) file.length()+4,methodProp[1],methodProp[2]);
            SecretLabel.setText(size+" bytes");
        }
        
        if(infoGenerated){
            SecretGenerator();
        }
        
    }//GEN-LAST:event_MethodChooserItemStateChanged

    private void MainUIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainUIActionPerformed
        
        Launcher.embe();
    }//GEN-LAST:event_MainUIActionPerformed

    private void PSNRMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PSNRMenuActionPerformed
        
        Launcher.psnr();
    }//GEN-LAST:event_PSNRMenuActionPerformed

    private void ExtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExtractActionPerformed
        
        Launcher.extract();
    }//GEN-LAST:event_ExtractActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        try {
            /* Save file and keep path */
            String saveTo = image.saveTo();
            /* Open saved image */
            Desktop.getDesktop().open(new File(saveTo));
            /* Disable Save */
            SaveButton.setEnabled(false);
        } catch (IOException ex) {
            Logger.getLogger(Embeder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void SecretGenerateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SecretGenerateButtonActionPerformed
        SecretGenerator();
    }//GEN-LAST:event_SecretGenerateButtonActionPerformed

    private void SecretGenerator(){
        if(imageChoosen){
            try {
                image = new PaletteImage(imagePath,imageName);
            } catch (IOException ex) {
                Logger.getLogger(Embeder.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            /* Get method properties */
            int[] methodProp = methodProp(MethodChooser.getSelectedIndex());
            int infoBlockSize = methodProp[1];
            int plainBlockSize = methodProp[2];
            
            int numberOfBlocks = image.ammountOfBlocks(plainBlockSize);
            info = new byte[numberOfBlocks*infoBlockSize-1];

            Random ran = new Random();
            for(int i=0;i<info.length;i++) info[i] = (byte) ran.nextInt(2);
            
            /* Display generated secret message length */
            SecretLabel.setText(info.length/8+" bytes");
            
            infoGenerated = true;
            infoChoosen = false;
            
        } else JOptionPane.showMessageDialog(new JFrame(), "Original image not selected", "ERROR", JOptionPane.ERROR_MESSAGE);
    }
    
    private void PSNREmbeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PSNREmbeActionPerformed
        
        Launcher.psnrembe();
    }//GEN-LAST:event_PSNREmbeActionPerformed

    private void SecretLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SecretLabelMouseClicked
        
        Copy(SecretLabel.getText().substring(0, SecretLabel.getText().length()-6));
    }//GEN-LAST:event_SecretLabelMouseClicked

    private void PSNRLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PSNRLabelMouseClicked
        
        Copy(PSNRLabel.getText().substring(0, PSNRLabel.getText().length()));
    }//GEN-LAST:event_PSNRLabelMouseClicked

    private void MethodChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MethodChooserActionPerformed
        
    }//GEN-LAST:event_MethodChooserActionPerformed

    private void Copy(String string){
        StringSelection data;
        data = new StringSelection(string);
        getToolkit().getSystemClipboard().setContents(data, data);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Embeder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Embeder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Embeder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Embeder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new Embeder().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ChooseOriginalButton;
    private javax.swing.JButton ChooseSecretFileButton;
    private javax.swing.JButton EmbedFileButton;
    private javax.swing.JMenuItem Extract;
    private javax.swing.JMenuItem MainUI;
    private javax.swing.JComboBox MethodChooser;
    private javax.swing.JLabel OriginalLabel;
    private javax.swing.JMenuItem PSNREmbe;
    private javax.swing.JLabel PSNRLabel;
    private javax.swing.JMenuItem PSNRMenu;
    private javax.swing.JButton SaveButton;
    private javax.swing.JButton SecretGenerateButton;
    private javax.swing.JLabel SecretLabel;
    private javax.swing.JMenu Tools;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
}
