/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Codes.Codes;
import PaletteImage.PaletteImage;
import java.awt.Desktop;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.Window;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author tebaomang
 */
public class Extracter extends javax.swing.JFrame {
    
    private PaletteImage image;
    private byte[] info;
    private String willBeCalc = " Will be automatically calculated!";

    /**
     * Creates new form NewJFrame
     */
    public Extracter() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ChooseOriginalButton = new javax.swing.JButton();
        EmbeFileButton = new javax.swing.JButton();
        MethodChooser = new javax.swing.JComboBox();
        OriginalLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        Tools = new javax.swing.JMenu();
        MainUI = new javax.swing.JMenuItem();
        Extract = new javax.swing.JMenuItem();
        PSNREmbe = new javax.swing.JMenuItem();
        PSNRMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Extract Information");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        ChooseOriginalButton.setText("Choose picture");
        ChooseOriginalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseOriginalButtonActionPerformed(evt);
            }
        });

        EmbeFileButton.setText("Extract File");
        EmbeFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmbeFileButtonActionPerformed(evt);
            }
        });

        MethodChooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hamming (1,3,7)", "CPT (2,18,4)", "Golay (3,23,11)", "COV (2,9,5)", "CPT (2,9,3)", "CPTE (2,9,4)", "MOD (3,18,9)", "MOD (3,15,8)", "CPT (2,7,3)" }));
        MethodChooser.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                MethodChooserItemStateChanged(evt);
            }
        });
        MethodChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                MethodChooserPropertyChange(evt);
            }
        });

        OriginalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        OriginalLabel.setText("Gimme a picture");

        Tools.setText("Tools");

        MainUI.setText("Embe Information");
        MainUI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainUIActionPerformed(evt);
            }
        });
        Tools.add(MainUI);

        Extract.setText("Extract Information");
        Extract.setEnabled(false);
        Extract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExtractActionPerformed(evt);
            }
        });
        Tools.add(Extract);

        PSNREmbe.setText("Embe by PSNR");
        PSNREmbe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PSNREmbeActionPerformed(evt);
            }
        });
        Tools.add(PSNREmbe);

        PSNRMenu.setText("Calculate PSNR");
        PSNRMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PSNRMenuActionPerformed(evt);
            }
        });
        Tools.add(PSNRMenu);

        jMenuBar1.add(Tools);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(22, 22, 22)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(ChooseOriginalButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(EmbeFileButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(OriginalLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(MethodChooser, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(17, 17, 17)
                .add(OriginalLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ChooseOriginalButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(MethodChooser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(EmbeFileButton)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ChooseOriginalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseOriginalButtonActionPerformed
        try {
            image = new PaletteImage();
            if(image!=null) OriginalLabel.setText(image.getFileName());
        } catch (IOException ex) {
            Logger.getLogger(Extracter.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ChooseOriginalButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        List<Window> visibleWindows = new ArrayList<Window>();
            for(Window w: Window.getWindows()){
                if(w.isShowing()){
                    visibleWindows.add(w);
                }
            }
        if(visibleWindows.isEmpty()) System.exit(0);
    }//GEN-LAST:event_formWindowClosed
    
    private void EmbeFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmbeFileButtonActionPerformed
        try {
            // TODO add your handling code here:
            
            if(image!=null){
                
                /* Get method properties */
                int[] methodProp = Embeder.methodProp(MethodChooser.getSelectedIndex());
                int blockSize= methodProp[0];
                int method = methodProp[3];
                
                /* Extract Information */
                info = image.Extract(blockSize, method);
                
                /* Use information to rebuild file */
                reverseInfo();
                
            } else JOptionPane.showMessageDialog(new JFrame(), "No image selected", "ERROR", JOptionPane.ERROR_MESSAGE);
            
        } catch (Exception ex) {
            Logger.getLogger(Extracter.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_EmbeFileButtonActionPerformed

    public void reverseInfo(){
        
        int offset = 0;
        
        byte[] Len = new byte[4*8];
        System.arraycopy(info, offset, Len, 0, 4*8); offset += 4*8;
        int Leng = Codes.bin2Int(Len);
        
        byte[] result = new byte[Leng];
        for(int i=0; i<Leng;i++){
            byte[] b = new byte[8];
            System.arraycopy(info, offset, b, 0, 8); offset += 8;
            result[i] = (byte) Codes.bin2Int(b);
        }
        
        FileDialog ChooseImage = new FileDialog(new Frame(), "Save Picture", FileDialog.SAVE);
        ChooseImage.setVisible(true);
        String infoName = ChooseImage.getFile();
        String infoPath = ChooseImage.getDirectory();
        
        try {
            OutputStream output = null;
            try {
                String saveTo = infoPath+System.getProperty("file.separator")+infoName;
                output = new BufferedOutputStream(new FileOutputStream(saveTo));
                output.write(result);
                Desktop.getDesktop().open(new File(saveTo));
            } finally {
                output.close();
            }
        }
        catch(FileNotFoundException ex){
        }
        catch(IOException ex){
        }
    }
    
    private void MethodChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_MethodChooserPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_MethodChooserPropertyChange

    private void MethodChooserItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_MethodChooserItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_MethodChooserItemStateChanged

    private void MainUIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MainUIActionPerformed
        // TODO add your handling code here:
        Launcher.embe();
    }//GEN-LAST:event_MainUIActionPerformed

    private void ExtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExtractActionPerformed
        // TODO add your handling code here:
        Launcher.extract();
    }//GEN-LAST:event_ExtractActionPerformed

    private void PSNREmbeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PSNREmbeActionPerformed
        // TODO add your handling code here:
        Launcher.psnrembe();
    }//GEN-LAST:event_PSNREmbeActionPerformed

    private void PSNRMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PSNRMenuActionPerformed
        // TODO add your handling code here:
        Launcher.psnr();
    }//GEN-LAST:event_PSNRMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Extracter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Extracter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Extracter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Extracter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new Extracter().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ChooseOriginalButton;
    private javax.swing.JButton EmbeFileButton;
    private javax.swing.JMenuItem Extract;
    private javax.swing.JMenuItem MainUI;
    private javax.swing.JComboBox MethodChooser;
    private javax.swing.JLabel OriginalLabel;
    private javax.swing.JMenuItem PSNREmbe;
    private javax.swing.JMenuItem PSNRMenu;
    private javax.swing.JMenu Tools;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
}
